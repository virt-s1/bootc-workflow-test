---
- hosts: cloud
  gather_facts: false
  become: false
  vars:
    test_os: "{{ lookup('env', 'TEST_OS') | default('centos-stream-9', true) }}"
    arch: "{{ lookup('env', 'ARCH') | default('x86_64', true) }}"
    ssh_key_pub: ""
    inventory_file: ""
    download_node: "{{ lookup('env', 'DOWNLOAD_NODE') | default('', true) }}"
    ami_id: ""
    ami:
      x86_64:
        rhel-9-4: ami-044442bf4326c9933
        centos-stream-9: ami-08f2fe20b72b2ffa7
      aarch64:
        rhel-9-4: ami-0eb96688e8d46c2af
        centos-stream-9: ami-09866c25c2d97b6cc
    instance_type:
      x86_64:
        "0": t2.medium
        "1": t3.medium
        "2": m6a.large
      aarch64:
        "0": t4g.medium
        "1": c7g.medium
        "2": m6g.medium

  tasks:
    - set_fact:
        random_num: "{{ 9999 | random(start=1001) }}"
    - set_fact:
        instance_name: "bootc-aws-{{ test_os }}-{{ random_num }}"

    - name: random number for instance type
      set_fact:
        instance_type_index: "{{ 3 | random(start=0) }}"

    - name: set random instance type
      set_fact:
        random_instance_type: "{{ lookup('env', 'instance_type') | default(instance_type[arch][instance_type_index], true) }}"

    - name: set random instance type to a fixed value if derived image is nvidia
      set_fact:
        random_instance_type: "g5.xlarge"
      when:
        - layered_image | default('') == "nvidia" and arch == "x86_64"

    - name: set random instance type to a fixed value if derived image is nvidia
      set_fact:
        random_instance_type: "g5g.xlarge"
      when:
        - layered_image | default('') == "nvidia" and arch == "aarch64"

    - name: "get available zone for instance {{ random_instance_type }}"
      shell: |
        aws ec2 describe-instance-type-offerings \
          --location-type availability-zone \
          --filters="Name=instance-type,Values={{ random_instance_type }}" \
          --query InstanceTypeOfferings | jq -r '.[0].Location'
      register: ec2_zone
      when: "'rhel' not in test_os"

    - name: get subnet
      shell: |
        aws ec2 describe-subnets \
          --output json \
          --filters "Name=tag:Name,Values=kite-ci" "Name=availabilityZone,Values={{ ec2_zone.stdout }}" | \
          jq -r ".Subnets[0].SubnetId"
      register: ec2_vpc_subnet
      when: "'rhel' not in test_os"

    - set_fact:
        subnet_id: "{{ ec2_vpc_subnet.stdout }}"
      when: "'rhel' not in test_os"

    - name: get virtqe subnet
      shell: |
        aws ec2 describe-subnets \
          --output json \
          --filters "Name=tag:Name,Values=InternalA-virtqe" | \
          jq -r ".Subnets[0].SubnetId"
      register: ec2_vpc_subnet
      when: '"rhel" in test_os'

    - set_fact:
        subnet_id: "{{ ec2_vpc_subnet.stdout }}"
      when: "'rhel' in test_os"

    - name: get security group
      shell: |
        aws ec2 describe-security-groups \
          --filters="Name=tag:Name,Values=kite-ci" \
          --output json | \
          jq -r ".SecurityGroups[0].GroupId"
      register: ec2_security_group
      when: "'rhel' not in test_os"

    - set_fact:
        group_id: "{{ ec2_security_group.stdout }}"
      when: "'rhel' not in test_os"

    - name: get virtqe security group
      shell: |
        aws ec2 describe-security-groups \
          --filters="Name=tag:Name,Values=bootc-test" \
          --output json | \
          jq -r ".SecurityGroups[0].GroupId"
      register: ec2_security_group
      when: "'rhel' in test_os"

    - set_fact:
        group_id: "{{ ec2_security_group.stdout }}"
      when: "'rhel' in test_os"

    - name: config ssh keypair used by test
      shell: |
        aws ec2 import-key-pair \
          --key-name "kp-bootc-{{ random_num }}" \
          --public-key-material "fileb://{{ ssh_key_pub }}" \
          --tag-specification 'ResourceType=key-pair,Tags=[{Key=Name,Value=bootc-test}]'

    - name: generate ec2_run_instance script
      template:
        src: ec2_run_instance.j2
        dest: "{{ playbook_dir }}/ec2_run_instance.sh"
        mode: 0755

    - name: run ec2 instance with script
      command: "{{ playbook_dir }}/ec2_run_instance.sh"
      register: result_instance

    - name: convert run_instance output to json
      set_fact:
        instance_json: "{{ result_instance.stdout | from_json }}"

    - name: wait for instance running
      shell: |
        aws ec2 wait instance-running \
          --instance-ids {{ instance_json.Instances[0].InstanceId }}

    - name: get instance public ip
      shell: |
        aws ec2 describe-instances \
          --instance-ids {{ instance_json.Instances[0].InstanceId }} \
          --query 'Reservations[*].Instances[*].PublicIpAddress' \
          --output text
      register: ip_result
      when: "'rhel' not in test_os"

    - set_fact:
        instance_ip: "{{ ip_result.stdout }}"
      when: "'rhel' not in test_os"

    - name: get instance private ip
      shell: |
        aws ec2 describe-instances \
          --instance-ids {{ instance_json.Instances[0].InstanceId }} \
          --query 'Reservations[*].Instances[*].PrivateIpAddress' \
          --output text
      register: ip_result
      when: "'rhel' in test_os"

    - set_fact:
        instance_ip: "{{ ip_result.stdout }}"
      when: "'rhel' in test_os"

    - name: waits until instance is reachable
      wait_for:
        host: "{{ instance_ip }}"
        port: 22
        search_regex: OpenSSH
        delay: 10
      retries: 30
      register: result_ssh_check
      until: result_ssh_check is success

    - name: add instance ip into host group guest
      add_host:
        name: "{{ instance_ip }}"
        groups: guest

    - name: Write instance ip to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: guest
        option: guest ansible_host
        value: "{{ instance_ip }}"
        no_extra_spaces: true

    - name: Write random number to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: cloud:vars
        option: random_num
        value: "{{ random_num }}"
        no_extra_spaces: true

    - name: write AWS EC2 instance id to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: cloud:vars
        option: instance_id
        value: "{{ instance_json.Instances[0].InstanceId }}"
        no_extra_spaces: true

    - name: write AWS ami id to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: cloud:vars
        option: ami_id
        value: "{{ ami_id }}"
        no_extra_spaces: true
