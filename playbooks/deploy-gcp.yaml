---
- hosts: cloud
  gather_facts: false
  become: false
  vars:
    test_os: "{{ lookup('env', 'TEST_OS') | default('centos-stream-9', true) }}"
    arch: "{{ lookup('env', 'ARCH') | default('x86_64', true) }}"
    ssh_key_pub: ""
    inventory_file: ""
    download_node: "{{ lookup('env', 'DOWNLOAD_NODE') | default('', true) }}"
    image_family:
      centos-stream-9: centos-stream-9
      rhel-9-4: centos-stream-9
    image_project:
      centos-stream-9: centos-cloud
      rhel-9-4: centos-cloud

  tasks:
    - set_fact:
        random_num: "{{ 9999 | random(start=1001) }}"
    - set_fact:
        instance_name: "bootc-gcp-{{ test_os }}-{{ random_num }}"

    - name: gcloud/gsutil - authorizing with a service account
      command:
        "/usr/bin/gcloud auth activate-service-account \
        --key-file={{ lookup('env', 'GCP_SERVICE_ACCOUNT_FILE') }}"

    - name: Create gcp key file
      shell: sed "s/ssh-rsa/cloud-user:ssh-rsa/" "{{ ssh_key_pub }}" > "{{ ssh_key_pub }}.gcp_key"
      when: "'centos' in test_os or 'rhel' in test_os"

    - set_fact:
        image_args: "--image-family={{ image_family[test_os] }} --image-project={{ image_project[test_os] }}"
      when: "'centos' in test_os or 'rhel' in test_os"

    - name: Create gcp instance
      command:
        "/usr/bin/gcloud compute instances create {{ instance_name }} \
        --zone=us-central1-a \
        --machine-type=n2-standard-2 \
        --boot-disk-auto-delete \
        --boot-disk-size=80GB \
        --boot-disk-type=pd-ssd \
        --metadata-from-file=ssh-keys={{ ssh_key_pub }}.gcp_key \
        --metadata=block-project-ssh-keys=TRUE \
        --provisioning-model=SPOT \
        {{ image_args }} \
        --service-account={{ lookup('env', 'GCP_SERVICE_ACCOUNT_NAME') }} \
        --project={{ lookup('env', 'GCP_PROJECT') }} \
        --format=json"
      register: result_instance

    - set_fact:
        instance_ip: "{{ result_instance.stdout | from_json | json_query('[0].networkInterfaces[0].accessConfigs[0].natIP') }}"

    - name: Waits until instance is reachable
      wait_for:
        host: "{{ instance_ip }}"
        port: 22
        search_regex: OpenSSH
        delay: 10
      retries: 30
      register: result_ssh_check
      until: result_ssh_check is success

    - name: Add instance ip into host group guest
      add_host:
        name: "{{ instance_ip }}"
        groups: guest

    - name: Wait 10 seconds for gcp instance
      wait_for:
        timeout: 10
      delegate_to: localhost

    - name: Write instance ip to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: guest
        option: guest ansible_host
        value: "{{ instance_ip }}"
        no_extra_spaces: true

    - name: Write random number to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: cloud:vars
        option: random_num
        value: "{{ random_num }}"
        no_extra_spaces: true

    - name: Write instance name to inventory file
      community.general.ini_file:
        path: "{{ inventory_file }}"
        section: cloud:vars
        option: instance_name
        value: "{{ instance_name }}"
        no_extra_spaces: true
