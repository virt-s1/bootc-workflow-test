apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: testing-farm
spec:
  description: Initiate testing-farm test given a list of container images
  params:
    - name: SNAPSHOT
      description: A list of container images that should undergo testing
    - name: GIT_URL
      description: URL of the GIT repository that contains the tests.
    - name: GIT_REF
      default: "main"
      description: Branch of the git repository used containing the tests
    - name: COMPOSE
      default: "Fedora-Rawhide"
      description: Compose to use for the system-under-test.
    - name: ARCH
      default: "x86_64"
      description: Comma-separated list of architectures to run against.
    - name: TIMEOUT
      default: "720"
      description: Set the timeout for the request in minutes. If the test takes longer than this, it will be terminated.
    - name: TESTING_FARM_API_URL
      default: https://api.dev.testing-farm.io/v0.1
      description: The testing-farm instance API to use
    - name: TMT_TAG
      default: "stable"
      description: TMT tag for the testing-farm plan filter
    - name: CERT_URL
    - name: DOWNLOAD_NODE
    - name: RHEL_REGISTRY_URL
    - name: GCP_PROJECT
    - name: AWS_REGION
    - name: AZURE_SUBSCRIPTION_ID
    - name: AZURE_CLIENT_ID
    - name: AZURE_TENANT
  volumes:
    - name: testing-farm-secret
      secret:
        secretName: testing-farm-secret
  steps:
    - image: quay.io/testing-farm/cli:latest
      volumeMounts:
        - name: testing-farm-secret
          mountPath: "/etc/secrets"
          readOnly: true
      env:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: GIT_URL
          value: $(params.GIT_URL)
        - name: GIT_REF
          value: $(params.GIT_REF)
        - name: COMPOSE
          value: $(params.COMPOSE)
        - name: ARCH
          value: $(params.ARCH)
        - name: TIMEOUT
          value: $(params.TIMEOUT)
        - name: TESTING_FARM_API_URL
          value: $(params.TESTING_FARM_API_URL)
        - name: TMT_TAG
          value: $(params.TMT_TAG)
        - name: CERT_URL
          value: $(params.CERT_URL)
        - name: DOWNLOAD_NODE
          value: $(params.DOWNLOAD_NODE)
        - name: RHEL_REGISTRY_URL
          value: $(params.RHEL_REGISTRY_URL)
        - name: GCP_PROJECT
          value: $(params.GCP_PROJECT)
        - name: AWS_REGION
          value: $(params.AWS_REGION)
        - name: AZURE_SUBSCRIPTION_ID
          value: $(params.AZURE_SUBSCRIPTION_ID)
        - name: AZURE_CLIENT_ID
          value: $(params.AZURE_CLIENT_ID)
        - name: AZURE_TENANT
          value: $(params.AZURE_TENANT)
        - name: GCP_SERVICE_ACCOUNT_FILE_B64
          valueFrom:
            secretKeyRef:
              name: "bootc-workflow-test-secret"
              key: "GCP_SERVICE_ACCOUNT_FILE_B64"
        - name: QUAY_USERNAME
          valueFrom:
            secretKeyRef:
              name: "bootc-workflow-test-secret"
              key: "QUAY_USERNAME"
        - name: QUAY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "bootc-workflow-test-secret"
              key: "QUAY_PASSWORD"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: "bootc-workflow-test-secret"
              key: "AWS_ACCESS_KEY_ID"
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "bootc-workflow-test-secret"
              key: "AWS_SECRET_ACCESS_KEY"
        - name: RHC_AK
          valueFrom:
            secretKeyRef:
              name: "bootc-workflow-test-secret"
              key: "RHC_AK"
        - name: RHC_ORGID
          valueFrom:
            secretKeyRef:
              name: "bootc-workflow-test-secret"
              key: "RHC_ORGID"
        - name: AZURE_SECRET
          valueFrom:
            secretKeyRef:
              name: "bootc-workflow-test-secret"
              key: "AZURE_SECRET"
      script: |
        #!/usr/bin/env bash

        export TESTING_FARM_API_TOKEN=$(cat /etc/secrets/testing-farm-token)

        apk add skopeo jq

        IMAGES=$(echo "${SNAPSHOT}" | jq -r '.components[].containerImage')
        COUNT=0
        for IMAGE in $IMAGES; do
          echo $IMAGE
          skopeo inspect docker://"$IMAGE" > skopeo_inspect.json
          IMAGE_NAME=$(echo "${IMAGE##*/}" | cut -d @ -f 1)
          IMAGE_TAG=$(echo "${IMAGE##*/}" | cut -d : -f 2)
          skopeo copy --dest-creds "${QUAY_USERNAME}":"${QUAY_PASSWORD}" docker://"$IMAGE" docker://quay.io/redhat_emp1/qe-"${IMAGE_NAME}:${IMAGE_TAG}"
          IMAGE_URL=quay.io/redhat_emp1/qe-"${IMAGE_NAME}:${IMAGE_TAG}"
          echo "$IMAGE_URL"
          if [[ $IMAGE_NAME =~ ^rhel-bootc || $IMAGE_NAME =~ ^centos-bootc || $IMAGE_NAME =~ ^fedora-bootc ]]; then
            REDHAT_ID=$(jq -r '.Labels."redhat.id"' skopeo_inspect.json)
            REDHAT_VERSION_ID=$(jq -r '.Labels."redhat.version-id"' skopeo_inspect.json)
            if [[ "${REDHAT_ID}" == "rhel" ]]; then
              COMPOSE=RHEL-${REDHAT_VERSION_ID}.0-Nightly
              DISTRO=rhel
            elif [[ "${REDHAT_ID}" == "centos" ]]; then
              COMPOSE=CentOS-Stream-${REDHAT_VERSION_ID}
              DISTRO=centos-stream
            else
              COMPOSE=Fedora-Rawhide
              DISTRO=fedora
            fi
          elif [[ $IMAGE_NAME =~ ^bootc-image-builder ]]; then
            BASE_IMAGE_NAME=$(jq -r '.Labels.name' skopeo_inspect.json)
            BASE_IMAGE_VERSION=$(jq -r '.Labels.version' skopeo_inspect.json)
            if [[ ${BASE_IMAGE_NAME} =~ ^ubi ]]; then
              COMPOSE=RHEL-${BASE_IMAGE_VERSION}.0-Nightly
              DISTRO=rhel
            else
              COMPOSE=Fedora-Rawhide
              DISTRO=fedora
            fi
          else
            echo "Error: unknown container image name: $IMAGE_NAME"
            exit 1
          fi
          COUNT=$(expr $COUNT + 1)
        done
        [[ $- =~ x ]] && debug=1 && set +x
        QUAY_SECRET=$(echo -n "${QUAY_USERNAME}:${QUAY_PASSWORD}" | base64 -w 0)
        [[ $debug == 1 ]] && set -x

        if [[ ${COUNT} -ne 1 ]]; then
          echo "Error: multiple images in this application: ${IMAGES}"
          exit 1
        fi

        testing-farm request \
          --plan-filter "tag: ${TMT_TAG}" \
          --environment TIER1_IMAGE_URL="${IMAGE_URL}" \
          --environment CERT_URL="${CERT_URL}" \
          --environment DOWNLOAD_NODE="${DOWNLOAD_NODE}" \
          --environment RHEL_REGISTRY_URL="${RHEL_REGISTRY_URL}" \
          --environment GCP_PROJECT="${GCP_PROJECT}" \
          --environment AWS_REGION="${AWS_REGION}" \
          --environment AZURE_SUBSCRIPTION_ID="${AZURE_SUBSCRIPTION_ID}" \
          --environment AZURE_CLIENT_ID="${AZURE_CLIENT_ID}" \
          --environment AZURE_TENANT="${AZURE_TENANT}" \
          --environment CI="RHTAP" \
          --environment ARCH="${ARCH}" \
          --secret QUAY_USERNAME="${QUAY_USERNAME}" \
          --secret QUAY_PASSWORD="${QUAY_PASSWORD}" \
          --secret QUAY_SECRET="${QUAY_SECRET}" \
          --secret GCP_SERVICE_ACCOUNT_FILE_B64="${GCP_SERVICE_ACCOUNT_FILE_B64}" \
          --secret AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
          --secret AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
          --secret RHC_AK="${RHC_AK}" \
          --secret RHC_ORGID="${RHC_ORGID}" \
          --secret AZURE_SECRET="${AZURE_SECRET}" \
          --git-url "${GIT_URL}" \
          --git-ref "${GIT_REF}" \
          --compose "${COMPOSE}" \
          --arch "${ARCH}" \
          --context "arch=${ARCH}" \
          --context "distro=${DISTRO}" \
          --timeout "${TIMEOUT}"
      # default to 60m, extend to 90m
      # https://tekton.dev/docs/pipelines/tasks/#specifying-a-timeout
      timeout: "1h30m"
